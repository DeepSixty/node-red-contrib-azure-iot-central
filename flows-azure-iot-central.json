[{"id":"cc61b493.f53e68","type":"tab","label":"Azure IoT Central","disabled":false,"info":""},{"id":"65cfba1f.f59464","type":"debug","z":"cc61b493.f53e68","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":810,"y":300,"wires":[]},{"id":"5f469adb.9a5434","type":"function","z":"cc61b493.f53e68","name":"onEcho","func":"// Create a command this the same name 'echo'\n// in the Azure IoT Central node\nif(flow.get('echo')){\n    return;   \n}\nelse{\n    node.log(\"Registering onEcho\");\n}\n\nfunction onEcho(request, response) {\n  node.log('Received synchronous call to echo');\n  node.log (\"Method name: \" + request.methodName );\n  node.log (\"Value: \" + request.payload);\n  \n  data = \"you said:\" + String(request.payload);\n\n  response.send(200, data , (err) => {\n    if (err) {\n      node.log('Unable to send method response: ' + err.toString());\n    }\n    else {\n            node.log('Response to method \\'' + request.methodName +\n                '\\' sent successfully... ' + data);\n        }\n  });\n}\n\nflow.set('echo',onEcho);\n","outputs":1,"noerr":0,"x":400,"y":100,"wires":[[]]},{"id":"852aa7a.ca83d58","type":"Azure IoT Central","z":"cc61b493.f53e68","scopeid":"","deviceid":"","primarykey":"","command1":"echo","command2":"turnOn","command3":"turnOff","command4":"","command5":"","property1":"brightness","property2":"","property3":"","property4":"","property5":"","transport":"mqtt","x":610,"y":300,"wires":[["65cfba1f.f59464"]]},{"id":"ac8e141e.7e9318","type":"data-generator","z":"cc61b493.f53e68","name":"temperature","field":"payload","fieldType":"msg","syntax":"json","template":"{\n    \"temperature\": \"{{int 20 40}}\"\n}","x":330,"y":300,"wires":[["852aa7a.ca83d58"]]},{"id":"a3d48ecf.47f16","type":"inject","z":"cc61b493.f53e68","name":"1 - Connect and send data","topic":"","payload":"","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":130,"y":300,"wires":[["ac8e141e.7e9318"]]},{"id":"6cc00f6c.58673","type":"function","z":"cc61b493.f53e68","name":"turnOn, turnOff","func":"// Using flow context to save the status for my device\nvar ledOn = flow.get('ledOn');\nif(ledOn === null ||ledOn === undefined) \n{\n    node.log(\"LED initialized to off.\");\n    ledOn = false;\n    flow.set('ledOn', ledOn);\n}\nif(flow.get('turnOn') && flow.get('turnOff')){\n    return;   \n}\nelse{\n    node.log(\"Registering turnXx\");\n}\n\n// Create a commands with the same name 'turnOn' and 'turnOff'\n// in the Azure IoT Central node\nfunction turnOn(request, response) {\n  node.log('Received asynchronous call to turn on LED');\n  if(!ledOn){\n    node.log('Turning on the LED');\n    ledOn = true;\n    flow.set('ledOn', ledOn);\n  }\n  response.send(200, (err) => {\n    if (err) {\n      node.error('Unable to send method response: ' + err.toString());\n    }\n  });\n}\n\nfunction turnOff(request, response) {\n  node.log('Received asynchronous call to turn off LED');\n  if(ledOn){\n    node.log('Turning off the LED');\n    ledOn = false;\n    flow.set('ledOn', ledOn);\n  }\n  response.send(200, (err) => {\n    if (err) {\n      node.error('Unable to send method response: ' + err.toString());\n    }\n  });\n}\n\nflow.set('turnOn',turnOn);\nflow.set('turnOff',turnOff);","outputs":1,"noerr":0,"x":420,"y":140,"wires":[[]]},{"id":"b04060f0.a35a1","type":"inject","z":"cc61b493.f53e68","name":"1 - Send reported properties","topic":"","payload":"{\"reported.properties\":{\"status\":true,\"nonexists\":true,\"climate\":{\"minTemperature\":\"68\",\"maxTemperature\":\"76\"}}}","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":180,"y":240,"wires":[["852aa7a.ca83d58"]]},{"id":"eb197256.63e7","type":"inject","z":"cc61b493.f53e68","name":"0 - Connect only","topic":"","payload":"","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":260,"y":360,"wires":[["852aa7a.ca83d58"]]},{"id":"ca3c1d9e.f218e","type":"function","z":"cc61b493.f53e68","name":"brightness","func":"// this is a property written in IoT Central\n// It'a a Desired property for twin\nfunction brightness(newValue)\n{\n    node.log(\"received desired prop from cloud:\" + newValue);\n    flow.set('brightness', newValue);\n}\n\nflow.set('brightness-handler',brightness);","outputs":1,"noerr":0,"x":410,"y":180,"wires":[[]]},{"id":"1ba90d90.932872","type":"inject","z":"cc61b493.f53e68","name":"0 - register functions","topic":"","payload":"","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":110,"y":100,"wires":[["5f469adb.9a5434","6cc00f6c.58673","ca3c1d9e.f218e"]]}]