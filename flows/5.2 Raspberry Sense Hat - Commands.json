[{"id":"a9dfcfac.9f47","type":"tab","label":"5.2 Raspberry Sense Hat - Commands","disabled":false,"info":""},{"id":"c39333a4.4071c","type":"rpi-sensehat in","z":"a9dfcfac.9f47","name":"","motion":false,"env":true,"stick":false,"x":190,"y":420,"wires":[["808c431b.6a307","8a39b3d7.7fdfd","de9a4646.ca6498"]]},{"id":"f1029f15.cdcd5","type":"debug","z":"a9dfcfac.9f47","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1070,"y":420,"wires":[]},{"id":"45f9f2ef.8a945c","type":"rpi-sensehat out","z":"a9dfcfac.9f47","name":"","x":830,"y":293,"wires":[]},{"id":"c958ccfb.7e9e","type":"function","z":"a9dfcfac.9f47","name":"format json","func":"{\n    var m = msg.payload;\n    msg.payload = {temperature: m.temperature};\n    return msg;\n}\n","outputs":1,"noerr":0,"x":690,"y":420,"wires":[["194810c9.fd7cff"]]},{"id":"b49b8070.c1548","type":"json","z":"a9dfcfac.9f47","name":"","property":"payload","action":"obj","pretty":false,"x":530,"y":420,"wires":[["c958ccfb.7e9e"]]},{"id":"194810c9.fd7cff","type":"Azure IoT Central","z":"a9dfcfac.9f47","scopeid":"","deviceid":"","primarykey":"","command1":"echo","command2":"turnOn","command3":"turnOff","command4":"","command5":"","property1":"","property2":"","property3":"","property4":"","property5":"","transport":"mqtt","x":870,"y":420,"wires":[["f1029f15.cdcd5"]]},{"id":"14b10b73.b0e935","type":"debug","z":"a9dfcfac.9f47","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":830,"y":380,"wires":[]},{"id":"808c431b.6a307","type":"function","z":"a9dfcfac.9f47","name":"echo","func":"//if(flow.get('echo')){\n//    return;   \n//}\n\nfunction onEcho(request, response) {\n  node.log('Received synchronous call to echo');\n  node.log (\"Method name: \" + request.methodName );\n  node.log (\"Value: \" + request.payload);\n  \n  data = \"you said:\" + String(request.payload);\n  msg.payload = data;\n \n  response.send(200, data , (err) => {\n    if (err) {\n      node.log('Unable to send method response: ' + err.toString());\n    }\n    else {\n            node.log('Response to method \\'' + request.methodName + '\\' sent successfully... ' + data);\n            node.send(msg);\n    }\n  });\n}\nflow.set('echo',onEcho);\n\n\n","outputs":1,"noerr":0,"x":590,"y":313,"wires":[["14b10b73.b0e935","45f9f2ef.8a945c"]]},{"id":"8a39b3d7.7fdfd","type":"function","z":"a9dfcfac.9f47","name":"turnOn, TurnOff","func":"// Using flow context to save the status for my device\nvar ledOn = flow.get('ledOn');\nif(ledOn === null ||ledOn === undefined) \n{\n    node.log(\"LED initialized to off.\");\n    ledOn = false;\n    flow.set('ledOn', ledOn);\n}\n\n// Create a commands with the same name 'turnOn' and 'turnOff'\n// in the Azure IoT Central node\nfunction turnOn(request, response) {\n  node.log('Received asynchronous call to turn on LED');\n  if(!ledOn){\n    node.log('Turning on the LED');\n    ledOn = true;\n    flow.set('ledOn', ledOn);\n    msg.payload = \"*,*,yellow\";\n  }\n  response.send(200, (err) => {\n    node.send(msg);\n    if (err) {\n      node.error('Unable to send method response: ' + err.toString());\n    }\n  });\n}\n\nfunction turnOff(request, response) {\n  node.log('Received asynchronous call to turn off LED');\n  if(ledOn){\n    node.log('Turning off the LED');\n    ledOn = false;\n    flow.set('ledOn', ledOn);\n    msg.payload = \"off\";\n  }\n  response.send(200, (err) => {\n    node.send(msg);\n    if (err) {\n      node.error('Unable to send method response: ' + err.toString());\n    }\n  });\n}\n\nflow.set('turnOn',turnOn);\nflow.set('turnOff',turnOff);","outputs":1,"noerr":0,"x":620,"y":273,"wires":[["45f9f2ef.8a945c","14b10b73.b0e935"]]},{"id":"de9a4646.ca6498","type":"delay","z":"a9dfcfac.9f47","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":380,"y":420,"wires":[["b49b8070.c1548"]]}]