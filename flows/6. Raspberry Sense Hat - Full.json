[{"id":"3806fba.5f05904","type":"tab","label":"6. Raspberry Full","disabled":false,"info":""},{"id":"b4dd9d4c.e8755","type":"rpi-sensehat in","z":"3806fba.5f05904","name":"","motion":false,"env":true,"stick":true,"x":110,"y":280,"wires":[["429bf08e.6a5b8","c3fdd11b.37e1d","c7b05839.35f3e8","591f71b9.1017a"]]},{"id":"24312d27.b4d772","type":"debug","z":"3806fba.5f05904","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":630,"y":366,"wires":[]},{"id":"792575d4.19f60c","type":"rpi-sensehat out","z":"3806fba.5f05904","name":"","x":590,"y":199,"wires":[]},{"id":"dc8f8903.5b6f38","type":"function","z":"3806fba.5f05904","name":"format json","func":"{\n    var m = msg.payload;\n    if(m.temperature){\n        msg.payload = {temperature: m.temperature};\n    }\n    else if(m.key){\n        if(m.key===\"ENTER\"){\n            msg.payload = {\"reported.properties\":{status:true}};\n        }\n        else {\n          msg.payload = {\"reported.properties\":{status:false}};\n        }\n    }\n    return msg;\n}\n","outputs":1,"noerr":0,"x":430,"y":339,"wires":[["56b32f5d.dec35"]]},{"id":"24a66102.f4f7fe","type":"json","z":"3806fba.5f05904","name":"","property":"payload","action":"obj","pretty":false,"x":350,"y":279,"wires":[["dc8f8903.5b6f38"]]},{"id":"56b32f5d.dec35","type":"Azure IoT Central","z":"3806fba.5f05904","scopeid":"","deviceid":"","primarykey":"","command1":"echo","command2":"turnOn","command3":"turnOff","command4":"","command5":"","property1":"","property2":"","property3":"","property4":"","property5":"","transport":"mqtt","x":630,"y":326,"wires":[["24312d27.b4d772"]]},{"id":"183336d5.344fe9","type":"debug","z":"3806fba.5f05904","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":590,"y":286,"wires":[]},{"id":"c3fdd11b.37e1d","type":"function","z":"3806fba.5f05904","name":"echo","func":"//if(flow.get('echo')){\n//    return;   \n//}\n\nfunction onEcho(request, response) {\n  node.log('Received synchronous call to echo');\n  node.log (\"Method name: \" + request.methodName );\n  node.log (\"Value: \" + request.payload);\n  \n  data = \"you said:\" + String(request.payload);\n  msg.payload = data;\n \n  response.send(200, data , (err) => {\n    if (err) {\n      node.log('Unable to send method response: ' + err.toString());\n    }\n    else {\n            node.log('Response to method \\'' + request.methodName + '\\' sent successfully... ' + data);\n            node.send(msg);\n    }\n  });\n}\nflow.set('echo',onEcho);\n\n\n","outputs":1,"noerr":0,"x":350,"y":219,"wires":[["183336d5.344fe9","792575d4.19f60c"]]},{"id":"c7b05839.35f3e8","type":"function","z":"3806fba.5f05904","name":"turnOn, TurnOff","func":"// Using flow context to save the status for my device\nvar ledOn = flow.get('ledOn');\nif(ledOn === null ||ledOn === undefined) \n{\n    node.log(\"LED initialized to off.\");\n    ledOn = false;\n    flow.set('ledOn', ledOn);\n}\n\n// Create a commands with the same name 'turnOn' and 'turnOff'\n// in the Azure IoT Central node\nfunction turnOn(request, response) {\n  node.log('Received asynchronous call to turn on LED');\n  if(!ledOn){\n    node.log('Turning on the LED');\n    ledOn = true;\n    flow.set('ledOn', ledOn);\n    msg.payload = \"*,*,yellow\";\n  }\n  response.send(200, (err) => {\n    node.send(msg);\n    if (err) {\n      node.error('Unable to send method response: ' + err.toString());\n    }\n  });\n}\n\nfunction turnOff(request, response) {\n  node.log('Received asynchronous call to turn off LED');\n  if(ledOn){\n    node.log('Turning off the LED');\n    ledOn = false;\n    flow.set('ledOn', ledOn);\n    msg.payload = \"off\";\n  }\n  response.send(200, (err) => {\n    node.send(msg);\n    if (err) {\n      node.error('Unable to send method response: ' + err.toString());\n    }\n  });\n}\n\nflow.set('turnOn',turnOn);\nflow.set('turnOff',turnOff);","outputs":1,"noerr":0,"x":380,"y":179,"wires":[["792575d4.19f60c","183336d5.344fe9"]]},{"id":"429bf08e.6a5b8","type":"delay","z":"3806fba.5f05904","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":280,"y":379,"wires":[["24a66102.f4f7fe"]]},{"id":"591f71b9.1017a","type":"function","z":"3806fba.5f05904","name":"brightness","func":"function brightness(newValue)\n{\n    node.log(\"received desired prop from cloud:\" + newValue);\n    flow.set('brightness', newValue);\n    var color = \"yellow\";\n    switch (newValue) {\n      case 0:\n        color = \"red\";\n        break;\n      case 1:\n        color = \"blue\";\n        break;\n      case 2:\n        color = \"green\";\n        break;\n      case 3:\n        color = \"grey\";\n        break;\n      case 4:\n        color = \"white\";\n        break;\n      case 5:\n        color = \"black\";\n        break;\n      default:\n        color = \"yellow\";\n    }\n    msg.payload = \"*,*,\" + color;\n    node.send(msg);\n}\n\nflow.set('brightness-handler',brightness);","outputs":1,"noerr":0,"x":370,"y":139,"wires":[["792575d4.19f60c","183336d5.344fe9"]]}]