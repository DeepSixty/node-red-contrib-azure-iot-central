[{"id":"9b6fedd0.13212","type":"tab","label":"5. Raspberry Sense Hat","disabled":false,"info":""},{"id":"5dd9f127.ef1e7","type":"rpi-sensehat in","z":"9b6fedd0.13212","d":true,"name":"","motion":false,"env":true,"stick":false,"x":250,"y":280,"wires":[["ca6a8759.1701c8","2742a3e3.ecc68c"]]},{"id":"ccfd5c14.c94a","type":"debug","z":"9b6fedd0.13212","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":730,"y":320,"wires":[]},{"id":"af83538.aea90b","type":"rpi-sensehat out","z":"9b6fedd0.13212","name":"","x":690,"y":153,"wires":[]},{"id":"6ce23756.6198a8","type":"function","z":"9b6fedd0.13212","name":"format json","func":"{\n    var m = msg.payload;\n    msg.payload = {temperature: m.temperature};\n    return msg;\n}\n","outputs":1,"noerr":0,"x":550,"y":280,"wires":[["bb53a63b.fb36d8"]]},{"id":"ca6a8759.1701c8","type":"json","z":"9b6fedd0.13212","name":"","property":"payload","action":"obj","pretty":false,"x":390,"y":280,"wires":[["6ce23756.6198a8"]]},{"id":"bb53a63b.fb36d8","type":"Azure IoT Central","z":"9b6fedd0.13212","scopeid":"","deviceid":"","primarykey":"","command1":"echo","command2":"turnOn","command3":"turnOff","command4":"","command5":"","property1":"","property2":"","property3":"","property4":"","property5":"","transport":"mqtt","x":730,"y":280,"wires":[["ccfd5c14.c94a"]]},{"id":"6d9b6a39.d74c64","type":"debug","z":"9b6fedd0.13212","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":690,"y":240,"wires":[]},{"id":"2742a3e3.ecc68c","type":"function","z":"9b6fedd0.13212","name":"echo","func":"//if(flow.get('echo')){\n//    return;   \n//}\n\nfunction onEcho(request, response) {\n  node.log('Received synchronous call to echo');\n  node.log (\"Method name: \" + request.methodName );\n  node.log (\"Value: \" + request.payload);\n  \n  data = \"you said:\" + String(request.payload);\n  msg.payload = data;\n \n  response.send(200, data , (err) => {\n    if (err) {\n      node.log('Unable to send method response: ' + err.toString());\n    }\n    else {\n            node.log('Response to method \\'' + request.methodName + '\\' sent successfully... ' + data);\n            node.send(msg);\n    }\n  });\n}\nflow.set('echo',onEcho);\n\n\n","outputs":1,"noerr":0,"x":450,"y":173,"wires":[["6d9b6a39.d74c64","af83538.aea90b"]]},{"id":"7edca068.8bbd","type":"inject","z":"9b6fedd0.13212","name":"","topic":"","payload":"{\"temperature\":10}","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":250,"y":173,"wires":[["2742a3e3.ecc68c","bb53a63b.fb36d8","a1d4e5f0.f3c068"]]},{"id":"a1d4e5f0.f3c068","type":"function","z":"9b6fedd0.13212","name":"turnOn, TurnOff","func":"// Using flow context to save the status for my device\nvar ledOn = flow.get('ledOn');\nif(ledOn === null ||ledOn === undefined) \n{\n    node.log(\"LED initialized to off.\");\n    ledOn = false;\n    flow.set('ledOn', ledOn);\n}\n\n// Create a commands with the same name 'turnOn' and 'turnOff'\n// in the Azure IoT Central node\nfunction turnOn(request, response) {\n  node.log('Received asynchronous call to turn on LED');\n  if(!ledOn){\n    node.log('Turning on the LED');\n    ledOn = true;\n    flow.set('ledOn', ledOn);\n    msg.payload = \"*,*,yellow\";\n  }\n  response.send(200, (err) => {\n    node.send(msg);\n    if (err) {\n      node.error('Unable to send method response: ' + err.toString());\n    }\n  });\n}\n\nfunction turnOff(request, response) {\n  node.log('Received asynchronous call to turn off LED');\n  if(ledOn){\n    node.log('Turning off the LED');\n    ledOn = false;\n    flow.set('ledOn', ledOn);\n    msg.payload = \"off\";\n  }\n  response.send(200, (err) => {\n    node.send(msg);\n    if (err) {\n      node.error('Unable to send method response: ' + err.toString());\n    }\n  });\n}\n\nflow.set('turnOn',turnOn);\nflow.set('turnOff',turnOff);","outputs":1,"noerr":0,"x":480,"y":133,"wires":[["af83538.aea90b","6d9b6a39.d74c64"]]}]